'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.setDefaultProps = setDefaultProps;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _bindRaf = require('./lib/bindRaf');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global window, document */


var OnVisible = function (_Component) {
    _inherits(OnVisible, _Component);

    function OnVisible() {
        var _ref;

        _classCallCheck(this, OnVisible);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this = _possibleConstructorReturn(this, (_ref = OnVisible.__proto__ || Object.getPrototypeOf(OnVisible)).call.apply(_ref, [this].concat(args)));

        _this.onScroll = (0, _bindRaf.bindRaf)(_this.onScroll.bind(_this));
        _this.state = {
            visible: false,
            bottom: 0,
            top: 0
        };
        return _this;
    }

    _createClass(OnVisible, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.onScroll();
            window.addEventListener('scroll', this.onScroll);
            window.addEventListener('resize', this.onScroll);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.stopListening();
        }
    }, {
        key: 'onScroll',
        value: function onScroll() {
            var _this2 = this;

            var pos = window.pageYOffset + window.innerHeight;
            var visbleTriggerRatio = this.props.percent && this.props.percent / 100 || 0.5;
            var box = this.holder.getBoundingClientRect();

            var pageYOffset = window.pageYOffset || document.documentElement.scrollTop;
            var docTop = document.documentElement.clientTop || 0;

            var top = box.top + box.height * visbleTriggerRatio + (pageYOffset - docTop);
            var visible = top < pos;
            var end = function end() {
                _this2.props.onChange(visible);
            };

            var somethingChanged = this.state.visible !== visible;
            var becameVisible = visible && !this.state.visible;

            if (somethingChanged) {
                this.setState(function () {
                    return {
                        visible: visible,
                        top: top
                    };
                }, end);
            }

            if (becameVisible && !this.props.bounce) {
                this.stopListening();
            }
        }
    }, {
        key: 'stopListening',
        value: function stopListening() {
            window.removeEventListener('scroll', this.onScroll);
            window.removeEventListener('resize', this.onScroll);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props = this.props,
                className = _props.className,
                visibleClassName = _props.visibleClassName,
                children = _props.children,
                wrappingElement = _props.wrappingElement,
                attributes = _objectWithoutProperties(_props, ['className', 'visibleClassName', 'children', 'wrappingElement']);

            var visible = this.state.visible;

            var classes = (0, _classnames2.default)(className, _defineProperty({}, visibleClassName || 'visible', visible));

            // other known properties which must not be passed to attributes
            delete attributes.percent;
            delete attributes.onChange;
            delete attributes.bounce;

            var invokingProps = _extends({}, attributes, {
                className: classes,
                ref: function ref(el) {
                    _this3.holder = el || _this3.holder;
                }
            });

            return _react2.default.createElement(wrappingElement, invokingProps, children);
        }
    }]);

    return OnVisible;
}(_react.Component);

OnVisible.defaultProps = {
    onChange: function onChange() {}, // eslint-disable-line no-empty-function
    bounce: false,
    wrappingElement: 'div'
};

OnVisible.propTypes = {
    className: _propTypes2.default.string,
    style: _propTypes2.default.object,
    visibleClassName: _propTypes2.default.string,
    children: _propTypes2.default.node,
    percent: _propTypes2.default.number,
    onChange: _propTypes2.default.func,
    bounce: _propTypes2.default.bool,
    wrappingElement: _propTypes2.default.string
};

exports.default = OnVisible;
function setDefaultProps(props) {
    Object.keys(props).forEach(function (key) {
        OnVisible.defaultProps[key] = props[key];
    });
}